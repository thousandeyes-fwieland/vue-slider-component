;(function(t, e) {
  'object' === typeof exports && 'object' === typeof module
    ? (module.exports = e(require('vue')))
    : 'function' === typeof define && define.amd
    ? define(['vue'], e)
    : 'object' === typeof exports
    ? (exports['vue-slider-component'] = e(require('vue')))
    : (t['vue-slider-component'] = e(t['Vue']))
})('undefined' !== typeof self ? self : this, function(t) {
  return (function() {
    var e = {
        679: function(t, e) {
          var r, n, i
          ;(function(o, a) {
            ;(n = []),
              (r = a),
              (i = 'function' === typeof r ? r.apply(e, n) : r),
              void 0 === i || (t.exports = i)
          })('undefined' !== typeof self && self, function() {
            function t() {
              var e = Object.getOwnPropertyDescriptor(document, 'currentScript')
              if (!e && 'currentScript' in document && document.currentScript)
                return document.currentScript
              if (e && e.get !== t && document.currentScript) return document.currentScript
              try {
                throw new Error()
              } catch (f) {
                var r,
                  n,
                  i,
                  o = /.*at [^(]*\((.*):(.+):(.+)\)$/gi,
                  a = /@([^@]*):(\d+):(\d+)\s*$/gi,
                  s = o.exec(f.stack) || a.exec(f.stack),
                  l = (s && s[1]) || !1,
                  u = (s && s[2]) || !1,
                  c = document.location.href.replace(document.location.hash, ''),
                  d = document.getElementsByTagName('script')
                l === c &&
                  ((r = document.documentElement.outerHTML),
                  (n = new RegExp(
                    '(?:[^\\n]+?\\n){0,' +
                      (u - 2) +
                      '}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*',
                    'i',
                  )),
                  (i = r.replace(n, '$1').trim()))
                for (var h = 0; h < d.length; h++) {
                  if ('interactive' === d[h].readyState) return d[h]
                  if (d[h].src === l) return d[h]
                  if (l === c && d[h].innerHTML && d[h].innerHTML.trim() === i) return d[h]
                }
                return null
              }
            }
            return t
          })
        },
        744: function(t, e) {
          'use strict'
          e.Z = (t, e) => {
            const r = t.__vccOpts || t
            for (const [n, i] of e) r[n] = i
            return r
          }
        },
        927: function(e) {
          'use strict'
          e.exports = t
        },
      },
      r = {}
    function n(t) {
      var i = r[t]
      if (void 0 !== i) return i.exports
      var o = (r[t] = { exports: {} })
      return e[t].call(o.exports, o, o.exports, n), o.exports
    }
    !(function() {
      n.d = function(t, e) {
        for (var r in e)
          n.o(e, r) && !n.o(t, r) && Object.defineProperty(t, r, { enumerable: !0, get: e[r] })
      }
    })(),
      (function() {
        n.o = function(t, e) {
          return Object.prototype.hasOwnProperty.call(t, e)
        }
      })(),
      (function() {
        n.p = ''
      })()
    var i = {}
    return (
      (function() {
        'use strict'
        if (
          (n.d(i, {
            default: function() {
              return Lt
            },
          }),
          'undefined' !== typeof window)
        ) {
          var t = window.document.currentScript,
            e = n(679)
          ;(t = e()),
            'currentScript' in document ||
              Object.defineProperty(document, 'currentScript', { get: e })
          var r = t && t.src.match(/(.+\/)[^/]+\.js(\?.*)?$/)
          r && (n.p = r[1])
        }
        var o = n(927)
        function a(t) {
          return (
            (a =
              'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function(t) {
                    return typeof t
                  }
                : function(t) {
                    return t &&
                      'function' == typeof Symbol &&
                      t.constructor === Symbol &&
                      t !== Symbol.prototype
                      ? 'symbol'
                      : typeof t
                  }),
            a(t)
          )
        }
        function s(t, e, r) {
          return (
            (e = l(e)),
            e in t
              ? Object.defineProperty(t, e, {
                  value: r,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (t[e] = r),
            t
          )
        }
        function l(t) {
          var e = u(t, 'string')
          return 'symbol' === a(e) ? e : String(e)
        }
        function u(t, e) {
          if ('object' !== a(t) || null === t) return t
          var r = t[Symbol.toPrimitive]
          if (void 0 !== r) {
            var n = r.call(t, e || 'default')
            if ('object' !== a(n)) return n
            throw new TypeError('@@toPrimitive must return a primitive value.')
          }
          return ('string' === e ? String : Number)(t)
        }
        var c = { key: 0, class: 'vue-slider-marks' }
        function d(t, e, r, n, i, a) {
          var l = (0, o.resolveComponent)('vue-slider-mark'),
            u = (0, o.resolveComponent)('vue-slider-dot')
          return (
            (0, o.openBlock)(),
            (0, o.createElementBlock)(
              'div',
              (0, o.mergeProps)(
                {
                  ref: 'container',
                  class: t.containerClasses,
                  style: t.containerStyles,
                  onClick:
                    e[2] ||
                    (e[2] = function() {
                      return t.clickHandle && t.clickHandle.apply(t, arguments)
                    }),
                  onTouchstartPassive:
                    e[3] ||
                    (e[3] = function() {
                      return t.dragStartOnProcess && t.dragStartOnProcess.apply(t, arguments)
                    }),
                  onMousedownPassive:
                    e[4] ||
                    (e[4] = function() {
                      return t.dragStartOnProcess && t.dragStartOnProcess.apply(t, arguments)
                    }),
                },
                t.$attrs,
              ),
              [
                (0, o.createElementVNode)(
                  'div',
                  { class: 'vue-slider-rail', style: (0, o.normalizeStyle)(t.railStyle) },
                  [
                    ((0, o.openBlock)(!0),
                    (0, o.createElementBlock)(
                      o.Fragment,
                      null,
                      (0, o.renderList)(t.processArray, function(e, r) {
                        return (0,
                        o.renderSlot)(t.$slots, 'process', (0, o.normalizeProps)((0, o.guardReactiveProps)(e)), function() {
                          return [
                            ((0, o.openBlock)(),
                            (0, o.createElementBlock)(
                              'div',
                              {
                                class: 'vue-slider-process',
                                key: 'process-'.concat(r),
                                style: (0, o.normalizeStyle)(e.style),
                              },
                              null,
                              4,
                            )),
                          ]
                        })
                      }),
                      256,
                    )),
                    t.sliderMarks && t.control
                      ? ((0, o.openBlock)(),
                        (0, o.createElementBlock)('div', c, [
                          ((0, o.openBlock)(!0),
                          (0, o.createElementBlock)(
                            o.Fragment,
                            null,
                            (0, o.renderList)(t.control.markList, function(r, n) {
                              return (0,
                              o.renderSlot)(t.$slots, 'mark', (0, o.normalizeProps)((0, o.guardReactiveProps)(r)), function() {
                                var i
                                return [
                                  ((0, o.openBlock)(),
                                  (0, o.createBlock)(
                                    l,
                                    {
                                      key: 'mark-'.concat(n),
                                      mark: r,
                                      hideLabel: t.hideLabel,
                                      style: (0, o.normalizeStyle)(
                                        ((i = {}),
                                        s(i, t.isHorizontal ? 'height' : 'width', '100%'),
                                        s(i, t.isHorizontal ? 'width' : 'height', t.tailSize),
                                        s(i, t.mainDirection, ''.concat(r.pos, '%')),
                                        i),
                                      ),
                                      stepStyle: t.stepStyle,
                                      stepActiveStyle: t.stepActiveStyle,
                                      labelStyle: t.labelStyle,
                                      labelActiveStyle: t.labelActiveStyle,
                                      onPressLabel:
                                        e[0] ||
                                        (e[0] = function(e) {
                                          return t.clickable && t.setValueByPos(e)
                                        }),
                                    },
                                    {
                                      step: (0, o.withCtx)(function() {
                                        return [
                                          (0, o.renderSlot)(
                                            t.$slots,
                                            'step',
                                            (0, o.normalizeProps)((0, o.guardReactiveProps)(r)),
                                          ),
                                        ]
                                      }),
                                      label: (0, o.withCtx)(function() {
                                        return [
                                          (0, o.renderSlot)(
                                            t.$slots,
                                            'label',
                                            (0, o.normalizeProps)((0, o.guardReactiveProps)(r)),
                                          ),
                                        ]
                                      }),
                                      _: 2,
                                    },
                                    1032,
                                    [
                                      'mark',
                                      'hideLabel',
                                      'style',
                                      'stepStyle',
                                      'stepActiveStyle',
                                      'labelStyle',
                                      'labelActiveStyle',
                                    ],
                                  )),
                                ]
                              })
                            }),
                            256,
                          )),
                        ]))
                      : (0, o.createCommentVNode)('', !0),
                    ((0, o.openBlock)(!0),
                    (0, o.createElementBlock)(
                      o.Fragment,
                      null,
                      (0, o.renderList)(t.dots, function(r, n) {
                        var i
                        return (
                          (0, o.openBlock)(),
                          (0, o.createBlock)(
                            u,
                            (0, o.mergeProps)(
                              {
                                ref_for: !0,
                                ref: 'dot-'.concat(n),
                                key: 'dot-'.concat(n),
                                value: r.value,
                                disabled: r.disabled,
                                focus: r.focus,
                                'dot-style': [
                                  r.style,
                                  r.disabled ? r.disabledStyle : null,
                                  r.focus ? r.focusStyle : null,
                                ],
                                tooltip: r.tooltip || t.tooltip,
                                'tooltip-style': [
                                  t.tooltipStyle,
                                  r.tooltipStyle,
                                  r.disabled ? r.tooltipDisabledStyle : null,
                                  r.focus ? r.tooltipFocusStyle : null,
                                ],
                                'tooltip-formatter': Array.isArray(t.sliderTooltipFormatter)
                                  ? t.sliderTooltipFormatter[n]
                                  : t.sliderTooltipFormatter,
                                'tooltip-placement': t.tooltipDirections[n],
                                style: [
                                  t.dotBaseStyle,
                                  ((i = {}),
                                  s(i, t.mainDirection, ''.concat(r.pos, '%')),
                                  s(
                                    i,
                                    'transition',
                                    ''.concat(t.mainDirection, ' ').concat(t.animateTime, 's'),
                                  ),
                                  i),
                                ],
                                onDragStart: function() {
                                  return t.dragStart(n)
                                },
                                role: 'slider',
                                'aria-valuenow': r.value,
                                'aria-valuemin': t.min,
                                'aria-valuemax': t.max,
                                'aria-orientation': t.isHorizontal ? 'horizontal' : 'vertical',
                                tabindex: '0',
                                onFocus: function() {
                                  return t.focus(r, n)
                                },
                                onBlur:
                                  e[1] ||
                                  (e[1] = function() {
                                    return t.blur()
                                  }),
                              },
                              t.dotAttrs,
                            ),
                            {
                              dot: (0, o.withCtx)(function() {
                                return [
                                  (0, o.renderSlot)(
                                    t.$slots,
                                    'dot',
                                    (0, o.normalizeProps)((0, o.guardReactiveProps)(r)),
                                  ),
                                ]
                              }),
                              tooltip: (0, o.withCtx)(function() {
                                return [
                                  (0, o.renderSlot)(
                                    t.$slots,
                                    'tooltip',
                                    (0, o.normalizeProps)((0, o.guardReactiveProps)(r)),
                                  ),
                                ]
                              }),
                              _: 2,
                            },
                            1040,
                            [
                              'value',
                              'disabled',
                              'focus',
                              'dot-style',
                              'tooltip',
                              'tooltip-style',
                              'tooltip-formatter',
                              'tooltip-placement',
                              'style',
                              'onDragStart',
                              'aria-valuenow',
                              'aria-valuemin',
                              'aria-valuemax',
                              'aria-orientation',
                              'onFocus',
                            ],
                          )
                        )
                      }),
                      128,
                    )),
                  ],
                  4,
                ),
                (0, o.renderSlot)(t.$slots, 'default', { value: t.getValue() }),
              ],
              16,
            )
          )
        }
        var h = ['aria-valuetext'],
          f = { class: 'vue-slider-dot-tooltip-text' }
        function m(t, e, r, n, i, a) {
          var s
          return (
            (0, o.openBlock)(),
            (0, o.createElementBlock)(
              'div',
              {
                ref: 'dot',
                class: (0, o.normalizeClass)(t.dotClasses),
                'aria-valuetext':
                  null === (s = t.tooltipValue) || void 0 === s ? void 0 : s.toString(),
                onMousedownPassive:
                  e[0] ||
                  (e[0] = function() {
                    return t.dragStart && t.dragStart.apply(t, arguments)
                  }),
                onTouchstartPassive:
                  e[1] ||
                  (e[1] = function() {
                    return t.dragStart && t.dragStart.apply(t, arguments)
                  }),
              },
              [
                (0, o.renderSlot)(t.$slots, 'dot', {}, function() {
                  return [
                    (0, o.createElementVNode)(
                      'div',
                      {
                        class: (0, o.normalizeClass)(t.handleClasses),
                        style: (0, o.normalizeStyle)(t.dotStyle),
                      },
                      null,
                      6,
                    ),
                  ]
                }),
                'none' !== t.tooltip
                  ? ((0, o.openBlock)(),
                    (0, o.createElementBlock)(
                      'div',
                      { key: 0, class: (0, o.normalizeClass)(t.tooltipClasses) },
                      [
                        (0, o.renderSlot)(t.$slots, 'tooltip', {}, function() {
                          return [
                            (0, o.createElementVNode)(
                              'div',
                              {
                                class: (0, o.normalizeClass)(t.tooltipInnerClasses),
                                style: (0, o.normalizeStyle)(t.tooltipStyle),
                              },
                              [
                                (0, o.createElementVNode)(
                                  'span',
                                  f,
                                  (0, o.toDisplayString)(t.tooltipValue),
                                  1,
                                ),
                              ],
                              6,
                            ),
                          ]
                        }),
                      ],
                      2,
                    ))
                  : (0, o.createCommentVNode)('', !0),
              ],
              42,
              h,
            )
          )
        }
        var p = (0, o.defineComponent)({
            name: 'VueSliderDot',
            emits: ['drag-start'],
            props: {
              value: { type: [String, Number], default: 0 },
              tooltip: { type: String, required: !0 },
              tooltipPlacement: {
                type: String,
                validator: function(t) {
                  return ['top', 'right', 'bottom', 'left'].indexOf(t) > -1
                },
                required: !0,
              },
              tooltipFormatter: { type: [String, Function] },
              focus: { type: Boolean, default: !1 },
              disabled: { type: Boolean, default: !1 },
              dotStyle: { type: Object },
              tooltipStyle: { type: Object },
            },
            computed: {
              dotClasses: function() {
                return [
                  'vue-slider-dot',
                  {
                    'vue-slider-dot-hover': 'hover' === this.tooltip || 'active' === this.tooltip,
                    'vue-slider-dot-disabled': this.disabled,
                    'vue-slider-dot-focus': this.focus,
                  },
                ]
              },
              handleClasses: function() {
                return [
                  'vue-slider-dot-handle',
                  {
                    'vue-slider-dot-handle-disabled': this.disabled,
                    'vue-slider-dot-handle-focus': this.focus,
                  },
                ]
              },
              tooltipClasses: function() {
                return [
                  'vue-slider-dot-tooltip',
                  ['vue-slider-dot-tooltip-'.concat(this.tooltipPlacement)],
                  { 'vue-slider-dot-tooltip-show': this.showTooltip },
                ]
              },
              tooltipInnerClasses: function() {
                return [
                  'vue-slider-dot-tooltip-inner',
                  ['vue-slider-dot-tooltip-inner-'.concat(this.tooltipPlacement)],
                  {
                    'vue-slider-dot-tooltip-inner-disabled': this.disabled,
                    'vue-slider-dot-tooltip-inner-focus': this.focus,
                  },
                ]
              },
              showTooltip: function() {
                switch (this.tooltip) {
                  case 'always':
                    return !0
                  case 'none':
                    return !1
                  case 'focus':
                  case 'active':
                    return !!this.focus
                  default:
                    return !1
                }
              },
              tooltipValue: function() {
                return this.tooltipFormatter
                  ? 'string' === typeof this.tooltipFormatter
                    ? this.tooltipFormatter.replace(/\{value\}/, String(this.value))
                    : this.tooltipFormatter(this.value)
                  : this.value
              },
            },
            methods: {
              dragStart: function() {
                if (this.disabled) return !1
                this.$emit('drag-start')
              },
            },
          }),
          y = n(744)
        const v = (0, y.Z)(p, [['render', m]])
        var b = v
        function g(t, e, r, n, i, a) {
          return (
            (0, o.openBlock)(),
            (0, o.createElementBlock)(
              'div',
              { class: (0, o.normalizeClass)(t.marksClasses) },
              [
                (0, o.renderSlot)(t.$slots, 'step', {}, function() {
                  return [
                    (0, o.createElementVNode)(
                      'div',
                      {
                        class: (0, o.normalizeClass)(t.stepClasses),
                        style: (0, o.normalizeStyle)([
                          t.stepStyle,
                          t.mark.style || {},
                          t.mark.active && t.stepActiveStyle ? t.stepActiveStyle : {},
                          t.mark.active && t.mark.activeStyle ? t.mark.activeStyle : {},
                        ]),
                      },
                      null,
                      6,
                    ),
                  ]
                }),
                t.hideLabel
                  ? (0, o.createCommentVNode)('', !0)
                  : (0, o.renderSlot)(t.$slots, 'label', { key: 0 }, function() {
                      return [
                        (0, o.createElementVNode)(
                          'div',
                          {
                            class: (0, o.normalizeClass)(t.labelClasses),
                            style: (0, o.normalizeStyle)([
                              t.labelStyle,
                              t.mark.labelStyle || {},
                              t.mark.active && t.labelActiveStyle ? t.labelActiveStyle : {},
                              t.mark.active && t.mark.labelActiveStyle
                                ? t.mark.labelActiveStyle
                                : {},
                            ]),
                            onClick:
                              e[0] ||
                              (e[0] = function() {
                                return t.labelClickHandle && t.labelClickHandle.apply(t, arguments)
                              }),
                          },
                          (0, o.toDisplayString)(t.mark.label),
                          7,
                        ),
                      ]
                    }),
              ],
              2,
            )
          )
        }
        var S = (0, o.defineComponent)({
          name: 'VueSliderMark',
          emits: ['press-label'],
          props: {
            mark: { type: Object, required: !0 },
            hideLabel: { type: Boolean },
            stepStyle: {
              type: Object,
              default: function() {
                return {}
              },
            },
            stepActiveStyle: {
              type: Object,
              default: function() {
                return {}
              },
            },
            labelStyle: {
              type: Object,
              default: function() {
                return {}
              },
            },
            labelActiveStyle: {
              type: Object,
              default: function() {
                return {}
              },
            },
          },
          computed: {
            marksClasses: function() {
              return ['vue-slider-mark', { 'vue-slider-mark-active': this.mark.active }]
            },
            stepClasses: function() {
              return ['vue-slider-mark-step', { 'vue-slider-mark-step-active': this.mark.active }]
            },
            labelClasses: function() {
              return ['vue-slider-mark-label', { 'vue-slider-mark-label-active': this.mark.active }]
            },
          },
          methods: {
            labelClickHandle: function(t) {
              t.stopPropagation(), this.$emit('press-label', this.mark.pos)
            },
          },
        })
        const k = (0, y.Z)(S, [['render', g]])
        var P,
          x = k,
          O = function(t) {
            return 'number' === typeof t ? ''.concat(t, 'px') : t
          },
          D = function(t) {
            var e = document.documentElement,
              r = document.body,
              n = t.getBoundingClientRect(),
              i = {
                y: n.top + (window.pageYOffset || e.scrollTop) - (e.clientTop || r.clientTop || 0),
                x:
                  n.left +
                  (window.pageXOffset || e.scrollLeft) -
                  (e.clientLeft || r.clientLeft || 0),
              }
            return i
          },
          E = function(t, e, r) {
            var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1,
              i = 'targetTouches' in t ? t.targetTouches[0] : t,
              o = D(e),
              a = { x: i.pageX - o.x, y: i.pageY - o.y }
            return { x: r ? e.offsetWidth * n - a.x : a.x, y: r ? e.offsetHeight * n - a.y : a.y }
          }
        ;(function(t) {
          ;(t[(t['PAGE_UP'] = 33)] = 'PAGE_UP'),
            (t[(t['PAGE_DOWN'] = 34)] = 'PAGE_DOWN'),
            (t[(t['END'] = 35)] = 'END'),
            (t[(t['HOME'] = 36)] = 'HOME'),
            (t[(t['LEFT'] = 37)] = 'LEFT'),
            (t[(t['UP'] = 38)] = 'UP'),
            (t[(t['RIGHT'] = 39)] = 'RIGHT'),
            (t[(t['DOWN'] = 40)] = 'DOWN')
        })(P || (P = {}))
        var w = function(t, e) {
          if (e.hook) {
            var r = e.hook(t)
            if ('function' === typeof r) return r
            if (!r) return null
          }
          switch (t.keyCode) {
            case P.UP:
              return function(t) {
                return 'ttb' === e.direction ? t - 1 : t + 1
              }
            case P.RIGHT:
              return function(t) {
                return 'rtl' === e.direction ? t - 1 : t + 1
              }
            case P.DOWN:
              return function(t) {
                return 'ttb' === e.direction ? t + 1 : t - 1
              }
            case P.LEFT:
              return function(t) {
                return 'rtl' === e.direction ? t + 1 : t - 1
              }
            case P.END:
              return function() {
                return e.max
              }
            case P.HOME:
              return function() {
                return e.min
              }
            case P.PAGE_UP:
              return function(t) {
                return t + 10
              }
            case P.PAGE_DOWN:
              return function(t) {
                return t - 10
              }
            default:
              return null
          }
        }
        function R(t) {
          return (
            (R =
              'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function(t) {
                    return typeof t
                  }
                : function(t) {
                    return t &&
                      'function' == typeof Symbol &&
                      t.constructor === Symbol &&
                      t !== Symbol.prototype
                      ? 'symbol'
                      : typeof t
                  }),
            R(t)
          )
        }
        function A(t, e) {
          if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function')
        }
        function V(t, e) {
          for (var r = 0; r < e.length; r++) {
            var n = e[r]
            ;(n.enumerable = n.enumerable || !1),
              (n.configurable = !0),
              'value' in n && (n.writable = !0),
              Object.defineProperty(t, C(n.key), n)
          }
        }
        function j(t, e, r) {
          return (
            e && V(t.prototype, e),
            r && V(t, r),
            Object.defineProperty(t, 'prototype', { writable: !1 }),
            t
          )
        }
        function B(t, e, r) {
          return (
            (e = C(e)),
            e in t
              ? Object.defineProperty(t, e, {
                  value: r,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (t[e] = r),
            t
          )
        }
        function C(t) {
          var e = N(t, 'string')
          return 'symbol' === R(e) ? e : String(e)
        }
        function N(t, e) {
          if ('object' !== R(t) || null === t) return t
          var r = t[Symbol.toPrimitive]
          if (void 0 !== r) {
            var n = r.call(t, e || 'default')
            if ('object' !== R(n)) return n
            throw new TypeError('@@toPrimitive must return a primitive value.')
          }
          return ('string' === e ? String : Number)(t)
        }
        var L,
          I,
          z = (function() {
            function t(e) {
              A(this, t), B(this, 'num', void 0), (this.num = e)
            }
            return (
              j(t, [
                {
                  key: 'decimal',
                  value: function(t, e) {
                    var r = this.num,
                      n = this.getDecimalLen(r),
                      i = this.getDecimalLen(t),
                      o = 0
                    switch (e) {
                      case '+':
                        ;(o = this.getExponent(n, i)),
                          (this.num = (this.safeRoundUp(r, o) + this.safeRoundUp(t, o)) / o)
                        break
                      case '-':
                        ;(o = this.getExponent(n, i)),
                          (this.num = (this.safeRoundUp(r, o) - this.safeRoundUp(t, o)) / o)
                        break
                      case '*':
                        this.num =
                          this.safeRoundUp(
                            this.safeRoundUp(r, this.getExponent(n)),
                            this.safeRoundUp(t, this.getExponent(i)),
                          ) / this.getExponent(n + i)
                        break
                      case '/':
                        ;(o = this.getExponent(n, i)),
                          (this.num = this.safeRoundUp(r, o) / this.safeRoundUp(t, o))
                        break
                      case '%':
                        ;(o = this.getExponent(n, i)),
                          (this.num = (this.safeRoundUp(r, o) % this.safeRoundUp(t, o)) / o)
                        break
                    }
                    return this
                  },
                },
                {
                  key: 'plus',
                  value: function(t) {
                    return this.decimal(t, '+')
                  },
                },
                {
                  key: 'minus',
                  value: function(t) {
                    return this.decimal(t, '-')
                  },
                },
                {
                  key: 'multiply',
                  value: function(t) {
                    return this.decimal(t, '*')
                  },
                },
                {
                  key: 'divide',
                  value: function(t) {
                    return this.decimal(t, '/')
                  },
                },
                {
                  key: 'remainder',
                  value: function(t) {
                    return this.decimal(t, '%')
                  },
                },
                {
                  key: 'toNumber',
                  value: function() {
                    return this.num
                  },
                },
                {
                  key: 'getDecimalLen',
                  value: function(t) {
                    var e = ''.concat(t).split('e')
                    return (''.concat(e[0]).split('.')[1] || '').length - (e[1] ? +e[1] : 0)
                  },
                },
                {
                  key: 'getExponent',
                  value: function(t, e) {
                    return Math.pow(10, void 0 !== e ? Math.max(t, e) : t)
                  },
                },
                {
                  key: 'safeRoundUp',
                  value: function(t, e) {
                    return Math.round(t * e)
                  },
                },
              ]),
              t
            )
          })()
        function T(t) {
          return (
            (T =
              'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function(t) {
                    return typeof t
                  }
                : function(t) {
                    return t &&
                      'function' == typeof Symbol &&
                      t.constructor === Symbol &&
                      t !== Symbol.prototype
                      ? 'symbol'
                      : typeof t
                  }),
            T(t)
          )
        }
        function M(t, e) {
          return $(t) || F(t, e) || q(t, e) || H()
        }
        function H() {
          throw new TypeError(
            'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
          )
        }
        function F(t, e) {
          var r =
            null == t
              ? null
              : ('undefined' != typeof Symbol && t[Symbol.iterator]) || t['@@iterator']
          if (null != r) {
            var n,
              i,
              o,
              a,
              s = [],
              l = !0,
              u = !1
            try {
              if (((o = (r = r.call(t)).next), 0 === e)) {
                if (Object(r) !== r) return
                l = !1
              } else
                for (; !(l = (n = o.call(r)).done) && (s.push(n.value), s.length !== e); l = !0);
            } catch (c) {
              ;(u = !0), (i = c)
            } finally {
              try {
                if (!l && null != r.return && ((a = r.return()), Object(a) !== a)) return
              } finally {
                if (u) throw i
              }
            }
            return s
          }
        }
        function $(t) {
          if (Array.isArray(t)) return t
        }
        function U(t, e) {
          var r = Object.keys(t)
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(t)
            e &&
              (n = n.filter(function(e) {
                return Object.getOwnPropertyDescriptor(t, e).enumerable
              })),
              r.push.apply(r, n)
          }
          return r
        }
        function W(t) {
          for (var e = 1; e < arguments.length; e++) {
            var r = null != arguments[e] ? arguments[e] : {}
            e % 2
              ? U(Object(r), !0).forEach(function(e) {
                  tt(t, e, r[e])
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r))
              : U(Object(r)).forEach(function(e) {
                  Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e))
                })
          }
          return t
        }
        function _(t) {
          return K(t) || X(t) || q(t) || G()
        }
        function G() {
          throw new TypeError(
            'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
          )
        }
        function q(t, e) {
          if (t) {
            if ('string' === typeof t) return Z(t, e)
            var r = Object.prototype.toString.call(t).slice(8, -1)
            return (
              'Object' === r && t.constructor && (r = t.constructor.name),
              'Map' === r || 'Set' === r
                ? Array.from(t)
                : 'Arguments' === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                ? Z(t, e)
                : void 0
            )
          }
        }
        function X(t) {
          if (
            ('undefined' !== typeof Symbol && null != t[Symbol.iterator]) ||
            null != t['@@iterator']
          )
            return Array.from(t)
        }
        function K(t) {
          if (Array.isArray(t)) return Z(t)
        }
        function Z(t, e) {
          ;(null == e || e > t.length) && (e = t.length)
          for (var r = 0, n = new Array(e); r < e; r++) n[r] = t[r]
          return n
        }
        function Y(t, e) {
          if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function')
        }
        function J(t, e) {
          for (var r = 0; r < e.length; r++) {
            var n = e[r]
            ;(n.enumerable = n.enumerable || !1),
              (n.configurable = !0),
              'value' in n && (n.writable = !0),
              Object.defineProperty(t, et(n.key), n)
          }
        }
        function Q(t, e, r) {
          return (
            e && J(t.prototype, e),
            r && J(t, r),
            Object.defineProperty(t, 'prototype', { writable: !1 }),
            t
          )
        }
        function tt(t, e, r) {
          return (
            (e = et(e)),
            e in t
              ? Object.defineProperty(t, e, {
                  value: r,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (t[e] = r),
            t
          )
        }
        function et(t) {
          var e = rt(t, 'string')
          return 'symbol' === T(e) ? e : String(e)
        }
        function rt(t, e) {
          if ('object' !== T(t) || null === t) return t
          var r = t[Symbol.toPrimitive]
          if (void 0 !== r) {
            var n = r.call(t, e || 'default')
            if ('object' !== T(n)) return n
            throw new TypeError('@@toPrimitive must return a primitive value.')
          }
          return ('string' === e ? String : Number)(t)
        }
        ;(function(t) {
          ;(t[(t['VALUE'] = 1)] = 'VALUE'),
            (t[(t['INTERVAL'] = 2)] = 'INTERVAL'),
            (t[(t['MIN'] = 3)] = 'MIN'),
            (t[(t['MAX'] = 4)] = 'MAX'),
            (t[(t['ORDER'] = 5)] = 'ORDER')
        })(I || (I = {}))
        var nt =
            ((L = {}),
            tt(L, I.VALUE, 'The type of the "value" is illegal'),
            tt(
              L,
              I.INTERVAL,
              'The prop "interval" is invalid, "(max - min)" must be divisible by "interval"',
            ),
            tt(L, I.MIN, 'The "value" must be greater than or equal to the "min".'),
            tt(L, I.MAX, 'The "value" must be less than or equal to the "max".'),
            tt(
              L,
              I.ORDER,
              'When "order" is false, the parameters "minRange", "maxRange", "fixed", "enabled" are invalid.',
            ),
            L),
          it = (function() {
            function t(e) {
              Y(this, t),
                tt(this, 'dotsPos', []),
                tt(this, 'dotsValue', []),
                tt(this, 'data', void 0),
                tt(this, 'enableCross', void 0),
                tt(this, 'fixed', void 0),
                tt(this, 'max', void 0),
                tt(this, 'min', void 0),
                tt(this, 'interval', void 0),
                tt(this, 'minRange', void 0),
                tt(this, 'maxRange', void 0),
                tt(this, 'order', void 0),
                tt(this, 'marks', void 0),
                tt(this, 'included', void 0),
                tt(this, 'process', void 0),
                tt(this, 'adsorb', void 0),
                tt(this, 'dotOptions', void 0),
                tt(this, 'onError', void 0),
                tt(this, 'cacheRangeDir', {}),
                (this.data = e.data),
                (this.max = e.max),
                (this.min = e.min),
                (this.interval = e.interval),
                (this.order = e.order),
                (this.marks = e.marks),
                (this.included = e.included),
                (this.process = e.process),
                (this.adsorb = e.adsorb),
                (this.dotOptions = e.dotOptions),
                (this.onError = e.onError),
                this.order
                  ? ((this.minRange = e.minRange || 0),
                    (this.maxRange = e.maxRange || 0),
                    (this.enableCross = e.enableCross),
                    (this.fixed = e.fixed))
                  : ((e.minRange || e.maxRange || !e.enableCross || e.fixed) &&
                      this.emitError(I.ORDER),
                    (this.minRange = 0),
                    (this.maxRange = 0),
                    (this.enableCross = !0),
                    (this.fixed = !1)),
                this.setValue(e.value)
            }
            return (
              Q(t, [
                {
                  key: 'setValue',
                  value: function(t) {
                    this.setDotsValue(Array.isArray(t) ? _(t) : [t], !0)
                  },
                },
                {
                  key: 'setDotsValue',
                  value: function(t, e) {
                    ;(this.dotsValue = t), e && this.syncDotsPos()
                  },
                },
                {
                  key: 'setDotsPos',
                  value: function(t) {
                    var e = this,
                      r = this.order
                        ? _(t).sort(function(t, e) {
                            return t - e
                          })
                        : t
                    ;(this.dotsPos = r),
                      this.setDotsValue(
                        r.map(function(t) {
                          return e.getValueByPos(t)
                        }),
                        this.adsorb,
                      )
                  },
                },
                {
                  key: 'getValueByPos',
                  value: function(t) {
                    var e = this.parsePos(t)
                    if (this.included) {
                      var r = 100
                      this.markList.forEach(function(n) {
                        var i = Math.abs(n.pos - t)
                        i < r && ((r = i), (e = n.value))
                      })
                    }
                    return e
                  },
                },
                {
                  key: 'syncDotsPos',
                  value: function() {
                    var t = this
                    this.dotsPos = this.dotsValue.map(function(e) {
                      return t.parseValue(e)
                    })
                  },
                },
                {
                  key: 'markList',
                  get: function() {
                    var t = this
                    if (!this.marks) return []
                    var e = function(e, r) {
                      var n = t.parseValue(e)
                      return W({ pos: n, value: e, label: e, active: t.isActiveByPos(n) }, r)
                    }
                    return !0 === this.marks
                      ? this.getValues().map(function(t) {
                          return e(t)
                        })
                      : '[object Object]' === Object.prototype.toString.call(this.marks)
                      ? Object.keys(this.marks)
                          .sort(function(t, e) {
                            return +t - +e
                          })
                          .map(function(r) {
                            var n = t.marks[r]
                            return e(r, 'string' !== typeof n ? n : { label: n })
                          })
                      : Array.isArray(this.marks)
                      ? this.marks.map(function(t) {
                          return e(t)
                        })
                      : 'function' === typeof this.marks
                      ? this.getValues()
                          .map(function(e) {
                            return { value: e, result: t.marks(e) }
                          })
                          .filter(function(t) {
                            var e = t.result
                            return !!e
                          })
                          .map(function(t) {
                            var r = t.value,
                              n = t.result
                            return e(r, n)
                          })
                      : []
                  },
                },
                {
                  key: 'getRecentDot',
                  value: function(t) {
                    var e = this.dotsPos.map(function(e) {
                      return Math.abs(e - t)
                    })
                    return e.indexOf(Math.min.apply(Math, _(e)))
                  },
                },
                {
                  key: 'getIndexByValue',
                  value: function(t) {
                    return this.data
                      ? this.data.indexOf(t)
                      : new z(+t)
                          .minus(this.min)
                          .divide(this.interval)
                          .toNumber()
                  },
                },
                {
                  key: 'getValueByIndex',
                  value: function(t) {
                    return (
                      t < 0 ? (t = 0) : t > this.total && (t = this.total),
                      this.data
                        ? this.data[t]
                        : new z(t)
                            .multiply(this.interval)
                            .plus(this.min)
                            .toNumber()
                    )
                  },
                },
                {
                  key: 'setDotPos',
                  value: function(t, e) {
                    t = this.getValidPos(t, e).pos
                    var r = t - this.dotsPos[e]
                    if (r) {
                      var n = new Array(this.dotsPos.length)
                      this.fixed
                        ? (n = this.getFixedChangePosArr(r, e))
                        : this.minRange || this.maxRange
                        ? (n = this.getLimitRangeChangePosArr(t, r, e))
                        : (n[e] = r),
                        this.setDotsPos(
                          this.dotsPos.map(function(t, e) {
                            return t + (n[e] || 0)
                          }),
                        )
                    }
                  },
                },
                {
                  key: 'getFixedChangePosArr',
                  value: function(t, e) {
                    var r = this
                    return (
                      this.dotsPos.forEach(function(n, i) {
                        if (i !== e) {
                          var o = r.getValidPos(n + t, i),
                            a = o.pos,
                            s = o.inRange
                          s || (t = Math.min(Math.abs(a - n), Math.abs(t)) * (t < 0 ? -1 : 1))
                        }
                      }),
                      this.dotsPos.map(function(e) {
                        return t
                      })
                    )
                  },
                },
                {
                  key: 'getLimitRangeChangePosArr',
                  value: function(t, e, r) {
                    var n = this,
                      i = [{ index: r, changePos: e }],
                      o = e
                    return (
                      [this.minRange, this.maxRange].forEach(function(a, s) {
                        if (!a) return !1
                        var l = 0 === s,
                          u = e > 0,
                          c = 0
                        c = l ? (u ? 1 : -1) : u ? -1 : 1
                        var d = function(t, e) {
                            var r = Math.abs(t - e)
                            return l ? r < n.minRangeDir : r > n.maxRangeDir
                          },
                          h = r + c,
                          f = n.dotsPos[h],
                          m = t
                        while (n.isPos(f) && d(f, m)) {
                          var p = n.getValidPos(f + o, h),
                            y = p.pos
                          i.push({ index: h, changePos: y - f }),
                            (h += c),
                            (m = y),
                            (f = n.dotsPos[h])
                        }
                      }),
                      this.dotsPos.map(function(t, e) {
                        var r = i.filter(function(t) {
                          return t.index === e
                        })
                        return r.length ? r[0].changePos : 0
                      })
                    )
                  },
                },
                {
                  key: 'isPos',
                  value: function(t) {
                    return 'number' === typeof t
                  },
                },
                {
                  key: 'getValidPos',
                  value: function(t, e) {
                    var r = this.valuePosRange[e],
                      n = !0
                    return (
                      t < r[0] ? ((t = r[0]), (n = !1)) : t > r[1] && ((t = r[1]), (n = !1)),
                      { pos: t, inRange: n }
                    )
                  },
                },
                {
                  key: 'parseValue',
                  value: function(t) {
                    if (this.data) t = this.data.indexOf(t)
                    else if ('number' === typeof t || 'string' === typeof t) {
                      if (((t = +t), t < this.min)) return this.emitError(I.MIN), 0
                      if (t > this.max) return this.emitError(I.MAX), 0
                      if ('number' !== typeof t || t !== t) return this.emitError(I.VALUE), 0
                      t = new z(t)
                        .minus(this.min)
                        .divide(this.interval)
                        .toNumber()
                    }
                    var e = new z(t).multiply(this.gap).toNumber()
                    return e < 0 ? 0 : e > 100 ? 100 : e
                  },
                },
                {
                  key: 'parsePos',
                  value: function(t) {
                    var e = Math.round(t / this.gap)
                    return this.getValueByIndex(e)
                  },
                },
                {
                  key: 'isActiveByPos',
                  value: function(t) {
                    return this.processArray.some(function(e) {
                      var r = M(e, 2),
                        n = r[0],
                        i = r[1]
                      return t >= n && t <= i
                    })
                  },
                },
                {
                  key: 'getValues',
                  value: function() {
                    if (this.data) return this.data
                    for (var t = [], e = 0; e <= this.total; e++)
                      t.push(
                        new z(e)
                          .multiply(this.interval)
                          .plus(this.min)
                          .toNumber(),
                      )
                    return t
                  },
                },
                {
                  key: 'getRangeDir',
                  value: function(t) {
                    return t
                      ? new z(t)
                          .divide(
                            new z(this.data ? this.data.length - 1 : this.max)
                              .minus(this.data ? 0 : this.min)
                              .toNumber(),
                          )
                          .multiply(100)
                          .toNumber()
                      : 100
                  },
                },
                {
                  key: 'emitError',
                  value: function(t) {
                    this.onError && this.onError(t, nt[t])
                  },
                },
                {
                  key: 'processArray',
                  get: function() {
                    if (this.process) {
                      if ('function' === typeof this.process) return this.process(this.dotsPos)
                      if (1 === this.dotsPos.length) return [[0, this.dotsPos[0]]]
                      if (this.dotsPos.length > 1)
                        return [
                          [
                            Math.min.apply(Math, _(this.dotsPos)),
                            Math.max.apply(Math, _(this.dotsPos)),
                          ],
                        ]
                    }
                    return []
                  },
                },
                {
                  key: 'total',
                  get: function() {
                    var t = 0
                    return (
                      (t = this.data
                        ? this.data.length - 1
                        : new z(this.max)
                            .minus(this.min)
                            .divide(this.interval)
                            .toNumber()),
                      t - Math.floor(t) !== 0 ? (this.emitError(I.INTERVAL), 0) : t
                    )
                  },
                },
                {
                  key: 'gap',
                  get: function() {
                    return 100 / this.total
                  },
                },
                {
                  key: 'minRangeDir',
                  get: function() {
                    return this.cacheRangeDir[this.minRange]
                      ? this.cacheRangeDir[this.minRange]
                      : (this.cacheRangeDir[this.minRange] = this.getRangeDir(this.minRange))
                  },
                },
                {
                  key: 'maxRangeDir',
                  get: function() {
                    return this.cacheRangeDir[this.maxRange]
                      ? this.cacheRangeDir[this.maxRange]
                      : (this.cacheRangeDir[this.maxRange] = this.getRangeDir(this.maxRange))
                  },
                },
                {
                  key: 'getDotRange',
                  value: function(t, e, r) {
                    if (!this.dotOptions) return r
                    var n = Array.isArray(this.dotOptions) ? this.dotOptions[t] : this.dotOptions
                    return n && void 0 !== n[e] ? this.parseValue(n[e]) : r
                  },
                },
                {
                  key: 'valuePosRange',
                  get: function() {
                    var t = this,
                      e = this.dotsPos,
                      r = []
                    return (
                      e.forEach(function(n, i) {
                        r.push([
                          Math.max(
                            t.minRange ? t.minRangeDir * i : 0,
                            t.enableCross ? 0 : e[i - 1] || 0,
                            t.getDotRange(i, 'min', 0),
                          ),
                          Math.min(
                            t.minRange ? 100 - t.minRangeDir * (e.length - 1 - i) : 100,
                            t.enableCross ? 100 : e[i + 1] || 100,
                            t.getDotRange(i, 'max', 100),
                          ),
                        ])
                      }),
                      r
                    )
                  },
                },
                {
                  key: 'dotsIndex',
                  get: function() {
                    var t = this
                    return this.dotsValue.map(function(e) {
                      return t.getIndexByValue(e)
                    })
                  },
                },
              ]),
              t
            )
          })()
        function ot(t) {
          return (
            (ot =
              'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function(t) {
                    return typeof t
                  }
                : function(t) {
                    return t &&
                      'function' == typeof Symbol &&
                      t.constructor === Symbol &&
                      t !== Symbol.prototype
                      ? 'symbol'
                      : typeof t
                  }),
            ot(t)
          )
        }
        function at(t, e) {
          if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function')
        }
        function st(t, e) {
          for (var r = 0; r < e.length; r++) {
            var n = e[r]
            ;(n.enumerable = n.enumerable || !1),
              (n.configurable = !0),
              'value' in n && (n.writable = !0),
              Object.defineProperty(t, ct(n.key), n)
          }
        }
        function lt(t, e, r) {
          return (
            e && st(t.prototype, e),
            r && st(t, r),
            Object.defineProperty(t, 'prototype', { writable: !1 }),
            t
          )
        }
        function ut(t, e, r) {
          return (
            (e = ct(e)),
            e in t
              ? Object.defineProperty(t, e, {
                  value: r,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (t[e] = r),
            t
          )
        }
        function ct(t) {
          var e = dt(t, 'string')
          return 'symbol' === ot(e) ? e : String(e)
        }
        function dt(t, e) {
          if ('object' !== ot(t) || null === t) return t
          var r = t[Symbol.toPrimitive]
          if (void 0 !== r) {
            var n = r.call(t, e || 'default')
            if ('object' !== ot(n)) return n
            throw new TypeError('@@toPrimitive must return a primitive value.')
          }
          return ('string' === e ? String : Number)(t)
        }
        var ht = (function() {
          function t(e) {
            at(this, t), ut(this, 'map', void 0), ut(this, 'states', 0), (this.map = e)
          }
          return (
            lt(t, [
              {
                key: 'add',
                value: function(t) {
                  this.states |= t
                },
              },
              {
                key: 'delete',
                value: function(t) {
                  this.states &= ~t
                },
              },
              {
                key: 'toggle',
                value: function(t) {
                  this.has(t) ? this.delete(t) : this.add(t)
                },
              },
              {
                key: 'has',
                value: function(t) {
                  return !!(this.states & t)
                },
              },
            ]),
            t
          )
        })()
        function ft(t) {
          return yt(t) || pt(t) || Dt(t) || mt()
        }
        function mt() {
          throw new TypeError(
            'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
          )
        }
        function pt(t) {
          if (
            ('undefined' !== typeof Symbol && null != t[Symbol.iterator]) ||
            null != t['@@iterator']
          )
            return Array.from(t)
        }
        function yt(t) {
          if (Array.isArray(t)) return Et(t)
        }
        function vt(t) {
          return (
            (vt =
              'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function(t) {
                    return typeof t
                  }
                : function(t) {
                    return t &&
                      'function' == typeof Symbol &&
                      t.constructor === Symbol &&
                      t !== Symbol.prototype
                      ? 'symbol'
                      : typeof t
                  }),
            vt(t)
          )
        }
        function bt(t, e) {
          var r = Object.keys(t)
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(t)
            e &&
              (n = n.filter(function(e) {
                return Object.getOwnPropertyDescriptor(t, e).enumerable
              })),
              r.push.apply(r, n)
          }
          return r
        }
        function gt(t) {
          for (var e = 1; e < arguments.length; e++) {
            var r = null != arguments[e] ? arguments[e] : {}
            e % 2
              ? bt(Object(r), !0).forEach(function(e) {
                  St(t, e, r[e])
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r))
              : bt(Object(r)).forEach(function(e) {
                  Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(r, e))
                })
          }
          return t
        }
        function St(t, e, r) {
          return (
            (e = kt(e)),
            e in t
              ? Object.defineProperty(t, e, {
                  value: r,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (t[e] = r),
            t
          )
        }
        function kt(t) {
          var e = Pt(t, 'string')
          return 'symbol' === vt(e) ? e : String(e)
        }
        function Pt(t, e) {
          if ('object' !== vt(t) || null === t) return t
          var r = t[Symbol.toPrimitive]
          if (void 0 !== r) {
            var n = r.call(t, e || 'default')
            if ('object' !== vt(n)) return n
            throw new TypeError('@@toPrimitive must return a primitive value.')
          }
          return ('string' === e ? String : Number)(t)
        }
        function xt(t, e) {
          return Rt(t) || wt(t, e) || Dt(t, e) || Ot()
        }
        function Ot() {
          throw new TypeError(
            'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
          )
        }
        function Dt(t, e) {
          if (t) {
            if ('string' === typeof t) return Et(t, e)
            var r = Object.prototype.toString.call(t).slice(8, -1)
            return (
              'Object' === r && t.constructor && (r = t.constructor.name),
              'Map' === r || 'Set' === r
                ? Array.from(t)
                : 'Arguments' === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                ? Et(t, e)
                : void 0
            )
          }
        }
        function Et(t, e) {
          ;(null == e || e > t.length) && (e = t.length)
          for (var r = 0, n = new Array(e); r < e; r++) n[r] = t[r]
          return n
        }
        function wt(t, e) {
          var r =
            null == t
              ? null
              : ('undefined' != typeof Symbol && t[Symbol.iterator]) || t['@@iterator']
          if (null != r) {
            var n,
              i,
              o,
              a,
              s = [],
              l = !0,
              u = !1
            try {
              if (((o = (r = r.call(t)).next), 0 === e)) {
                if (Object(r) !== r) return
                l = !1
              } else
                for (; !(l = (n = o.call(r)).done) && (s.push(n.value), s.length !== e); l = !0);
            } catch (c) {
              ;(u = !0), (i = c)
            } finally {
              try {
                if (!l && null != r.return && ((a = r.return()), Object(a) !== a)) return
              } finally {
                if (u) throw i
              }
            }
            return s
          }
        }
        function Rt(t) {
          if (Array.isArray(t)) return t
        }
        var At = { None: 0, Drag: 2, Focus: 4 },
          Vt = 4,
          jt = (0, o.defineComponent)({
            name: 'VueSlider',
            components: { VueSliderDot: b, VueSliderMark: x },
            emits: ['change', 'drag-start', 'dragging', 'drag-end', 'error', 'update:modelValue'],
            data: function() {
              return { control: null, states: new ht(At), scale: 1, focusDotIndex: 0 }
            },
            props: {
              modelValue: { type: [Number, String, Array], default: 0 },
              silent: { type: Boolean, default: !1 },
              direction: {
                type: String,
                default: 'ltr',
                validator: function(t) {
                  return ['ltr', 'rtl', 'ttb', 'btt'].indexOf(t) > -1
                },
              },
              width: { type: [Number, String] },
              height: { type: [Number, String] },
              dotSize: { type: [Number, Array], default: 14 },
              contained: { type: Boolean, default: !1 },
              min: { type: Number, default: 0 },
              max: { type: Number, default: 100 },
              interval: { type: Number, default: 1 },
              disabled: { type: Boolean, default: !1 },
              clickable: { type: Boolean, default: !0 },
              dragOnClick: { type: Boolean, default: !1 },
              duration: { type: Number, default: 0.5 },
              data: { type: [Object, Array] },
              dataValue: { type: String, default: 'value' },
              dataLabel: { type: String, default: 'label' },
              lazy: { type: Boolean, default: !1 },
              tooltip: {
                type: String,
                default: 'active',
                validator: function(t) {
                  return ['none', 'always', 'focus', 'hover', 'active'].indexOf(t) > -1
                },
              },
              tooltipPlacement: {
                type: [String, Array],
                validator: function(t) {
                  return (Array.isArray(t) ? t : [t]).every(function(t) {
                    return ['top', 'right', 'bottom', 'left'].indexOf(t) > -1
                  })
                },
              },
              tooltipFormatter: { type: [String, Array, Function] },
              useKeyboard: { type: Boolean, default: !0 },
              keydownHook: { type: Function },
              enableCross: { type: Boolean, default: !0 },
              fixed: { type: Boolean, default: !1 },
              order: { type: Boolean, default: !0 },
              minRange: { type: Number },
              maxRange: { type: Number },
              marks: { type: [Boolean, Object, Array, Function], default: !1 },
              process: { type: [Boolean, Function], default: !0 },
              zoom: { type: Number },
              included: { type: Boolean },
              adsorb: { type: Boolean },
              hideLabel: { type: Boolean },
              dotOptions: { type: [Object, Array] },
              dotAttrs: { type: Object },
              railStyle: { type: Object },
              processStyle: { type: Object },
              dotStyle: { type: Object },
              tooltipStyle: { type: Object },
              stepStyle: { type: Object },
              stepActiveStyle: { type: Object },
              labelStyle: { type: Object },
              labelActiveStyle: { type: Object },
            },
            computed: {
              isHorizontal: function() {
                return 'ltr' === this.direction || 'rtl' === this.direction
              },
              isReverse: function() {
                return 'rtl' === this.direction || 'btt' === this.direction
              },
              tailSize: function() {
                return O((this.isHorizontal ? this.height : this.width) || Vt)
              },
              containerClasses: function() {
                return [
                  'vue-slider',
                  ['vue-slider-'.concat(this.direction)],
                  { 'vue-slider-disabled': this.disabled },
                ]
              },
              containerStyles: function() {
                var t = Array.isArray(this.dotSize) ? this.dotSize : [this.dotSize, this.dotSize],
                  e = xt(t, 2),
                  r = e[0],
                  n = e[1],
                  i = this.width ? O(this.width) : this.isHorizontal ? 'auto' : O(Vt),
                  o = this.height ? O(this.height) : this.isHorizontal ? O(Vt) : 'auto'
                return {
                  padding: this.contained
                    ? ''.concat(n / 2, 'px ').concat(r / 2, 'px')
                    : this.isHorizontal
                    ? ''.concat(n / 2, 'px 0')
                    : '0 '.concat(r / 2, 'px'),
                  width: i,
                  height: o,
                }
              },
              processArray: function() {
                var t = this
                return this.control.processArray.map(function(e, r) {
                  var n,
                    i = xt(e, 3),
                    o = i[0],
                    a = i[1],
                    s = i[2]
                  if (o > a) {
                    var l = [a, o]
                    ;(o = l[0]), (a = l[1])
                  }
                  var u = t.isHorizontal ? 'width' : 'height'
                  return {
                    start: o,
                    end: a,
                    index: r,
                    style: gt(
                      gt(
                        ((n = {}),
                        St(n, t.isHorizontal ? 'height' : 'width', '100%'),
                        St(n, t.isHorizontal ? 'top' : 'left', 0),
                        St(n, t.mainDirection, ''.concat(o, '%')),
                        St(n, u, ''.concat(a - o, '%')),
                        St(n, 'transitionProperty', ''.concat(u, ',').concat(t.mainDirection)),
                        St(n, 'transitionDuration', ''.concat(t.animateTime, 's')),
                        n),
                        t.processStyle,
                      ),
                      s,
                    ),
                  }
                })
              },
              dotBaseStyle: function() {
                var t,
                  e = Array.isArray(this.dotSize) ? this.dotSize : [this.dotSize, this.dotSize],
                  r = xt(e, 2),
                  n = r[0],
                  i = r[1]
                return (
                  (t = this.isHorizontal
                    ? St(
                        {
                          transform: 'translate('.concat(
                            this.isReverse ? '50%' : '-50%',
                            ', -50%)',
                          ),
                          WebkitTransform: 'translate('.concat(
                            this.isReverse ? '50%' : '-50%',
                            ', -50%)',
                          ),
                          top: '50%',
                        },
                        'ltr' === this.direction ? 'left' : 'right',
                        '0',
                      )
                    : St(
                        {
                          transform: 'translate(-50%, '.concat(
                            this.isReverse ? '50%' : '-50%',
                            ')',
                          ),
                          WebkitTransform: 'translate(-50%, '.concat(
                            this.isReverse ? '50%' : '-50%',
                            ')',
                          ),
                          left: '50%',
                        },
                        'btt' === this.direction ? 'bottom' : 'top',
                        '0',
                      )),
                  gt({ width: ''.concat(n, 'px'), height: ''.concat(i, 'px') }, t)
                )
              },
              mainDirection: function() {
                switch (this.direction) {
                  case 'ltr':
                    return 'left'
                  case 'rtl':
                    return 'right'
                  case 'btt':
                    return 'bottom'
                  case 'ttb':
                    return 'top'
                  default:
                    return 'left'
                }
              },
              tooltipDirections: function() {
                var t = this.tooltipPlacement || (this.isHorizontal ? 'top' : 'left')
                return Array.isArray(t)
                  ? t
                  : this.dots.map(function() {
                      return t
                    })
              },
              dots: function() {
                var t = this
                return this.control.dotsPos.map(function(e, r) {
                  return gt(
                    {
                      pos: e,
                      index: r,
                      value: t.control.dotsValue[r],
                      focus: t.states.has(At.Focus) && t.focusDotIndex === r,
                      disabled: t.disabled,
                      style: t.dotStyle,
                    },
                    (Array.isArray(t.dotOptions) ? t.dotOptions[r] : t.dotOptions) || {},
                  )
                })
              },
              animateTime: function() {
                return this.states.has(At.Drag) ? 0 : this.duration
              },
              canSort: function() {
                return (
                  this.order && !this.minRange && !this.maxRange && !this.fixed && this.enableCross
                )
              },
              sliderData: function() {
                var t = this
                return this.isObjectArrayData(this.data)
                  ? this.data.map(function(e) {
                      return e[t.dataValue]
                    })
                  : this.isObjectData(this.data)
                  ? Object.keys(this.data)
                  : this.data
              },
              sliderMarks: function() {
                var t = this
                return this.marks
                  ? this.marks
                  : this.isObjectArrayData(this.data)
                  ? function(e) {
                      var r = { label: e }
                      return (
                        t.data.some(function(n) {
                          return n[t.dataValue] === e && ((r.label = n[t.dataLabel]), !0)
                        }),
                        r
                      )
                    }
                  : this.isObjectData(this.data)
                  ? this.data
                  : void 0
              },
              sliderTooltipFormatter: function() {
                var t = this
                if (this.tooltipFormatter) return this.tooltipFormatter
                if (this.isObjectArrayData(this.data))
                  return function(e) {
                    var r = '' + e
                    return (
                      t.data.some(function(n) {
                        return n[t.dataValue] === e && ((r = n[t.dataLabel]), !0)
                      }),
                      r
                    )
                  }
                if (this.isObjectData(this.data)) {
                  var e = this.data
                  return function(t) {
                    return e[t]
                  }
                }
              },
              isNotSync: function() {
                var t = this.control.dotsValue
                return Array.isArray(this.modelValue)
                  ? this.modelValue.length !== t.length ||
                      this.modelValue.some(function(e, r) {
                        return e !== t[r]
                      })
                  : this.modelValue !== t[0]
              },
              dragRange: function() {
                var t = this.dots[this.focusDotIndex - 1],
                  e = this.dots[this.focusDotIndex + 1]
                return [t ? t.pos : -1 / 0, e ? e.pos : 1 / 0]
              },
            },
            watch: {
              modelValue: function() {
                this.control &&
                  !this.states.has(At.Drag) &&
                  this.isNotSync &&
                  this.control.setValue(this.modelValue)
              },
            },
            methods: {
              isObjectData: function(t) {
                return !!t && '[object Object]' === Object.prototype.toString.call(t)
              },
              isObjectArrayData: function(t) {
                return !!t && Array.isArray(t) && t.length > 0 && 'object' === vt(t[0])
              },
              bindEvent: function() {
                document.addEventListener('touchmove', this.dragMove, { passive: !1 }),
                  document.addEventListener('touchend', this.dragEnd, { passive: !1 }),
                  document.addEventListener('mousedown', this.blurHandle),
                  document.addEventListener('mousemove', this.dragMove),
                  document.addEventListener('mouseup', this.dragEnd),
                  document.addEventListener('mouseleave', this.dragEnd),
                  document.addEventListener('keydown', this.keydownHandle)
              },
              unbindEvent: function() {
                document.removeEventListener('touchmove', this.dragMove),
                  document.removeEventListener('touchend', this.dragEnd),
                  document.removeEventListener('mousedown', this.blurHandle),
                  document.removeEventListener('mousemove', this.dragMove),
                  document.removeEventListener('mouseup', this.dragEnd),
                  document.removeEventListener('mouseleave', this.dragEnd),
                  document.removeEventListener('keydown', this.keydownHandle)
              },
              setScale: function() {
                this.scale = new z(
                  Math.floor(this.isHorizontal ? this.$el.offsetWidth : this.$el.offsetHeight),
                )
                  .multiply(this.zoom || 1)
                  .divide(100)
                  .toNumber()
              },
              initControl: function() {
                var t = this
                ;(this.control = new it({
                  value: this.modelValue,
                  data: this.sliderData,
                  enableCross: this.enableCross,
                  fixed: this.fixed,
                  max: this.max,
                  min: this.min,
                  interval: this.interval,
                  minRange: this.minRange,
                  maxRange: this.maxRange,
                  order: this.order,
                  marks: this.sliderMarks,
                  included: this.included,
                  process: this.process,
                  adsorb: this.adsorb,
                  dotOptions: this.dotOptions,
                  onError: this.emitError,
                })),
                  [
                    'data',
                    'enableCross',
                    'fixed',
                    'max',
                    'min',
                    'interval',
                    'minRange',
                    'maxRange',
                    'order',
                    'marks',
                    'process',
                    'adsorb',
                    'included',
                    'dotOptions',
                  ].forEach(function(e) {
                    t.$watch(e, function(r) {
                      if (
                        'data' === e &&
                        Array.isArray(t.control.data) &&
                        Array.isArray(r) &&
                        t.control.data.length === r.length &&
                        r.every(function(e, r) {
                          return e === t.control.data[r]
                        })
                      )
                        return !1
                      switch (e) {
                        case 'data':
                        case 'dataLabel':
                        case 'dataValue':
                          t.control.data = t.sliderData
                          break
                        case 'mark':
                          t.control.marks = t.sliderMarks
                          break
                        default:
                          t.control[e] = r
                      }
                      ;['data', 'max', 'min', 'interval'].indexOf(e) > -1 && t.control.syncDotsPos()
                    })
                  })
              },
              syncValueByPos: function() {
                var t = this.control.dotsValue
                if (
                  this.isDiff(
                    t,
                    Array.isArray(this.modelValue) ? this.modelValue : [this.modelValue],
                  )
                ) {
                  var e = 1 === t.length ? t[0] : ft(t)
                  this.$emit('change', e, this.focusDotIndex), this.$emit('update:modelValue', e)
                }
              },
              isDiff: function(t, e) {
                return (
                  t.length !== e.length ||
                  t.some(function(t, r) {
                    return t !== e[r]
                  })
                )
              },
              emitError: function(t, e) {
                this.silent || console.error('[VueSlider error]: '.concat(e)),
                  this.$emit('error', t, e)
              },
              dragStartOnProcess: function(t) {
                if (this.dragOnClick) {
                  this.setScale()
                  var e = this.getPosByEvent(t),
                    r = this.control.getRecentDot(e)
                  if (this.dots[r].disabled) return
                  this.dragStart(r),
                    this.control.setDotPos(e, this.focusDotIndex),
                    this.lazy || this.syncValueByPos()
                }
              },
              dragStart: function(t) {
                ;(this.focusDotIndex = t),
                  this.setScale(),
                  this.states.add(At.Drag),
                  this.states.add(At.Focus),
                  this.$emit('drag-start', this.focusDotIndex)
              },
              dragMove: function(t) {
                if (!this.states.has(At.Drag)) return !1
                t.preventDefault()
                var e = this.getPosByEvent(t)
                this.isCrossDot(e),
                  this.control.setDotPos(e, this.focusDotIndex),
                  this.lazy || this.syncValueByPos()
                var r = this.control.dotsValue
                this.$emit('dragging', 1 === r.length ? r[0] : ft(r), this.focusDotIndex)
              },
              isCrossDot: function(t) {
                if (this.canSort) {
                  var e = this.focusDotIndex,
                    r = t
                  if (
                    (r > this.dragRange[1]
                      ? ((r = this.dragRange[1]), this.focusDotIndex++)
                      : r < this.dragRange[0] && ((r = this.dragRange[0]), this.focusDotIndex--),
                    e !== this.focusDotIndex)
                  ) {
                    var n = this.$refs['dot-'.concat(this.focusDotIndex)]
                    n && n.$el && n.$el.focus(), this.control.setDotPos(r, e)
                  }
                }
              },
              dragEnd: function(t) {
                var e = this
                if (!this.states.has(At.Drag)) return !1
                setTimeout(function() {
                  e.lazy && e.syncValueByPos(),
                    e.included && e.isNotSync
                      ? e.control.setValue(e.modelValue)
                      : e.control.syncDotsPos(),
                    e.states.delete(At.Drag),
                    (e.useKeyboard && !('targetTouches' in t)) || e.states.delete(At.Focus),
                    e.$emit('drag-end', e.focusDotIndex)
                })
              },
              blurHandle: function(t) {
                if (
                  !this.states.has(At.Focus) ||
                  !this.$refs.container ||
                  this.$refs.container.contains(t.target)
                )
                  return !1
                this.states.delete(At.Focus)
              },
              clickHandle: function(t) {
                if (!this.clickable || this.disabled) return !1
                if (!this.states.has(At.Drag)) {
                  this.setScale()
                  var e = this.getPosByEvent(t)
                  this.setValueByPos(e)
                }
              },
              focus: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0
                t.disabled || (this.states.add(At.Focus), (this.focusDotIndex = e))
              },
              blur: function() {
                this.states.delete(At.Focus)
              },
              getValue: function() {
                var t = this.control.dotsValue
                return 1 === t.length ? t[0] : t
              },
              getIndex: function() {
                var t = this.control.dotsIndex
                return 1 === t.length ? t[0] : t
              },
              setValue: function(t) {
                this.control.setValue(Array.isArray(t) ? ft(t) : [t]), this.syncValueByPos()
              },
              setIndex: function(t) {
                var e = this,
                  r = Array.isArray(t)
                    ? t.map(function(t) {
                        return e.control.getValueByIndex(t)
                      })
                    : this.control.getValueByIndex(t)
                this.setValue(r)
              },
              setValueByPos: function(t) {
                var e = this,
                  r = this.control.getRecentDot(t)
                if (this.disabled || this.dots[r].disabled) return !1
                ;(this.focusDotIndex = r),
                  this.control.setDotPos(t, r),
                  this.syncValueByPos(),
                  this.useKeyboard && this.states.add(At.Focus),
                  setTimeout(function() {
                    e.included && e.isNotSync
                      ? e.control.setValue(e.modelValue)
                      : e.control.syncDotsPos()
                  })
              },
              keydownHandle: function(t) {
                var e = this
                if (!this.useKeyboard || !this.states.has(At.Focus)) return !1
                var r = this.included && this.marks,
                  n = w(t, {
                    direction: this.direction,
                    max: r ? this.control.markList.length - 1 : this.control.total,
                    min: 0,
                    hook: this.keydownHook,
                  })
                if (n) {
                  t.preventDefault()
                  var i = -1,
                    o = 0
                  r
                    ? (this.control.markList.some(function(t, r) {
                        return t.value === e.control.dotsValue[e.focusDotIndex] && ((i = n(r)), !0)
                      }),
                      i < 0
                        ? (i = 0)
                        : i > this.control.markList.length - 1 &&
                          (i = this.control.markList.length - 1),
                      (o = this.control.markList[i].pos))
                    : ((i = n(
                        this.control.getIndexByValue(this.control.dotsValue[this.focusDotIndex]),
                      )),
                      (o = this.control.parseValue(this.control.getValueByIndex(i)))),
                    this.isCrossDot(o),
                    this.control.setDotPos(o, this.focusDotIndex),
                    this.syncValueByPos()
                }
              },
              getPosByEvent: function(t) {
                return (
                  E(t, this.$el, this.isReverse, this.zoom)[this.isHorizontal ? 'x' : 'y'] /
                  this.scale
                )
              },
              renderSlot: function(t, e, r) {
                var n = this.$slots[t]
                return n ? n(e) : r
              },
            },
            created: function() {
              this.initControl()
            },
            mounted: function() {
              this.bindEvent()
            },
            beforeUnmount: function() {
              this.unbindEvent()
            },
          })
        const Bt = (0, y.Z)(jt, [['render', d]])
        var Ct = Bt
        ;(Ct.VueSliderMark = x), (Ct.VueSliderDot = b)
        var Nt = Ct,
          Lt = Nt
      })(),
      (i = i['default']),
      i
    )
  })()
})
//# sourceMappingURL=vue-slider-component.umd.min.js.map
